(()=>{"use strict";var e={466:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChessView=void 0;const r=s(884);t.ChessView=class{constructor(e,t){this.controller=t,this.renderEnabled=!0,this.cvsDim=e,this.pieceRend=new r.textPieceDrawer,this.boardRend=new r.solidBoardDrawer;let s=document.getElementById("root"),i=document.createElement("canvas");i.height=e,i.width=e,i.addEventListener("click",(e=>this.controller.processInput(e.x,e.y,this.cvsDim))),s.appendChild(i),this.CTX=i.getContext("2d")}toggleRender(){this.renderEnabled=!this.renderEnabled}draw(e,t){this.CTX.clearRect(0,0,this.cvsDim,this.cvsDim),!1===this.renderEnabled?this.drawToConsole(e,t):(this.boardRend.draw(t,this.CTX,this.cvsDim),this.pieceRend.draw(e,this.CTX,this.cvsDim))}drawToConsole(e,t){let s=Array.from(Array(8),(e=>Array.from(Array(8),(e=>"-"))));for(let t of e)s[t.x][t.y]=(0,r.getLetterFromPiece)(t);let[i,a]=["",""];for(var o=7;o>=0;o--){for(var h=0;h<8;h++)a=s[h][o],i+=a;console.log(i),i=""}}}},120:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChessController=void 0;const r=s(769),i=s(466);t.ChessController=class{constructor(){this.enPassantTarget="NONE",this.selection="NONE",this.whoseTurn="W",this.game=new r.ChessBoard,this.view=new i.ChessView(800,this);let e=this.game.getAllPiecesOf("W");this.currentPlayersLegalMoves=this.calcLegalMoves(e),this.printMoves(),this.display()}display(){let e=this.getEmptyMoveBoard();"NONE"!=this.selection&&(e=this.currentPlayersLegalMoves.get(this.selection)),this.view.draw(this.game.getAllGamePieces(),e),console.log("newboy"),this.printMoves()}processInput(e,t,s){let r=s/8,i={x:Math.floor(e/r),y:7-Math.floor(t/r)};"NONE"!=this.selection&&this.moveIsLegal(this.selection,i)?(this.commitTurn(this.selection,i),this.checkEndState()):(this.selectSquare(i),this.display())}selectSquare(e){let t=this.game.getSquareAt(e);"EMPTY"!=t&&t.color==this.whoseTurn?this.selection=t:this.selection="NONE"}checkEndState(){this.currentPlayerHasLegalMoves()||(this.curPlayerInCheck()?this.handleWin():this.handleStalemate()),this.insufficientMaterialToMate()&&this.handleDrawByInsufficientMaterial()}insufficientMaterialToMate(){return!1}handleWin(){console.log(`Player ${this.whoseTurn} wins by checkmate. `)}handleStalemate(){console.log("A draw by stalemate.")}handleDrawByInsufficientMaterial(){console.log("A draw by insufficient material")}moveIsLegal(e,t){return!!this.currentPlayersLegalMoves.has(e)&&this.currentPlayersLegalMoves.get(e)[t.x][t.y]}commitTurn(e,t){this.enPassantTarget="NONE","PAWN"==e.ruleSet&&this.decideEPFlag(e,t);let s=!0;if(this.game.playerCanCastle(this.whoseTurn)){if("KING"==e.ruleSet){let r=this.moveIsCastles(t);"NO"!=r&&(this.castle(e,r),s=!1),this.game.revokeAllCastleRights(this.whoseTurn)}"ROOK"==e.ruleSet&&(0==e.x&&this.game.revokeQueensideCastleRights(this.whoseTurn),7==e.x&&this.game.revokeKingsideCastleRights(this.whoseTurn))}s&&this.game.commitMove(e,t),this.selection="NONE",this.display(),this.whoseTurn=this.currentOpponent();let r=this.game.getAllPiecesOf(this.whoseTurn);this.currentPlayersLegalMoves=this.calcLegalMoves(r)}castle(e,t){let s="W"==e.color?0:7,[r,i,a]=[0,0,0];[r,i,a]="KINGSIDE"==t?[7,6,5]:[0,2,3];let o=this.game.getSquareAt({x:r,y:s});this.game.commitMove(e,{x:i,y:s}),this.game.commitMove(o,{x:a,y:s})}moveIsCastles(e){let t=this.game.getPlayer(this.whoseTurn);return 6==e.x&&t.hasKingsideCastleRights?"KINGSIDE":2==e.x&&t.hasQueensideCastleRights?"QUEENSIDE":"NO"}decideEPFlag(e,t){if(this.pawnHasNotMoved(e)){let s="W"==e.color?1:-1,r="W"==e.color?1:6;t.y==r+2*s&&(this.enPassantTarget={x:t.x,y:t.y-s})}}calcLegalMoves(e){let t=new Map;for(let s of e)t.set(s,this.getLegalMovesOf(s));return t}getLegalMovesOf(e){let t=this.game.getTestBoard(),s=this.getMovespaceOf(e,t);return s=this.inducedCheckFilter(e,s,t),s=this.castleFilter(e,s,t),s}curPlayerInCheck(){let e=this.game.getKingOf(this.whoseTurn);return!this.moveAvoidsCheck(e,{x:e.x,y:e.y},this.game.getTestBoard())}currentOpponent(){return"W"===this.whoseTurn?"B":"W"}currentPlayerHasLegalMoves(){let e=!1,t=!1;for(let s of this.currentPlayersLegalMoves.values())t=s.map((e=>e.reduce(((e,t)=>e||t)))).reduce(((e,t)=>e||t)),e=e||t;return e}castleFilter(e,t,s){if("KING"!=e.ruleSet)return t;let r=this.game.getPlayer(e.color),[i,a]="W"==e.color?[6,0]:[6,7];return r.hasKingsideCastleRights&&this.kingsideCastleCheck(e,s)&&(t[i][a]=!0),[i,a]="W"==e.color?[2,0]:[2,7],r.hasQueensideCastleRights&&this.queensideCastleCheck(e,s)&&(t[i][a]=!0),t}kingsideCastleCheck(e,t){return this.intermediateSquaresCheck(e,[{x:5,y:e.y},{x:6,y:e.y}])}queensideCastleCheck(e,t){return this.intermediateSquaresCheck(e,[{x:1,y:e.y},{x:2,y:e.y},{x:3,y:e.y}])}intermediateSquaresCheck(e,t){let s=[];for(let r of t)s.push(this.game.squareIsEmpty(r)&&this.moveAvoidsCheck(e,r,this.game.getTestBoard()));return s.reduce(((e,t)=>e&&t))}inducedCheckFilter(e,t,s){for(var r=0;r<8;r++)for(var i=0;i<8;i++)t[r][i]&&(t[r][i]=this.moveAvoidsCheck(e,{x:r,y:i},s));return t}moveAvoidsCheck(e,t,s){let r=this.game.getKingOf(this.whoseTurn),i={x:r.x,y:r.y},a=this.game.getAllPiecesOf(this.currentOpponent());a=a.filter((e=>e.x!=t.x||e.y!=t.y));let o=e.x,h=e.y,l=this.cloneBoard(s),n=Object.assign(Object.assign({},e),{x:t.x,y:t.y});l[o][h]="EMPTY",l[t.x][t.y]=n,"KING"==e.ruleSet&&(i=t);let c=[];for(let e of a)if(c=this.getMovespaceOf(e,l),c[i.x][i.y])return!1;return!0}getMovespaceOf(e,t){switch(e.ruleSet){case"QUEEN":return this.queenThreats(e,t);case"KING":return this.kingThreats(e,t);case"KNIGHT":return this.knightThreats(e,t);case"BISHOP":return this.bishopThreats(e,t);case"ROOK":return this.rookThreats(e,t);case"PAWN":return this.combineBoolArrays(this.pawnThreats(e,t),this.pawnMoves(e,t))}}queenThreats(e,t){return this.combineBoolArrays(this.bishopThreats(e,t),this.rookThreats(e,t))}bishopThreats(e,t){return this.directionalThreatSearch(e,t,[{x:1,y:-1},{x:-1,y:1},{x:1,y:1},{x:-1,y:-1}])}rookThreats(e,t){return this.directionalThreatSearch(e,t,[{x:1,y:0},{x:-1,y:0},{x:0,y:-1},{x:0,y:1}])}combineBoolArrays(e,t){return e.map(((e,s)=>e.map(((e,r)=>e||t[s][r]))))}directionalThreatSearch(e,t,s){let r={x:e.x,y:e.y},i=this.getEmptyMoveBoard(),a=Object.assign({},r),o="EMPTY";for(let h of s){for(let s=1;s<7&&(a.x+=h.x,a.y+=h.y,this.inBounds(a));s++){if(o=t[a.x][a.y],"EMPTY"!=o){if(o.color===e.color)break;i[a.x][a.y]=!0;break}i[a.x][a.y]=!0}a.x=r.x,a.y=r.y}return i}inBounds(e){return!(e.x>7||e.y>7||e.x<0||e.y<0)}pawnThreats(e,t){let s=e.x,r=e.y,i=this.getEmptyMoveBoard(),a="W"==e.color?1:-1,o=[{x:s+1,y:r+a},{x:s-1,y:r+a}];for(let e of o)this.inBounds(e)&&(this.positionHasEnemyAt(e,t)||this.EPCheck(e))&&(i[e.x][e.y]=!0);return i}positionHasEnemyAt(e,t){let s=t[e.x][e.y];return"EMPTY"!=s&&s.color!=this.whoseTurn}EPCheck(e){let t=this.enPassantTarget;return"NONE"!=t&&t.x==e.x&&t.y==e.y}pawnMoves(e,t){let s=this.getEmptyMoveBoard(),r="W"==e.color?1:-1,i={x:e.x,y:e.y+r};return this.inBounds(i)&&!this.squareIsEmpty(i,t)||(s[i.x][i.y]=!0,i.y+=r,this.inBounds(i)&&this.squareIsEmpty(i,t)&&this.pawnHasNotMoved(e)&&(s[i.x][i.y]=!0)),s}squareIsEmpty(e,t){return"EMPTY"==t[e.x][e.y]}pawnHasNotMoved(e){let t=e.color,s=(e.x,e.y);switch(t){case"W":return 1===s;case"B":return 6===s}}knightThreats(e,t){let s,r=e.x,i=e.y,a=this.getEmptyMoveBoard();for(let o=-1;o<=1;o+=2)for(let h=-1;h<=1;h+=2){s=[{x:r+2*o,y:i+h},{x:r+o,y:i+2*h}];for(let r of s)this.inBounds(r)&&(a[r.x][r.y]=this.canMoveToOrCaptureOn(e,r,t))}return a}kingThreats(e,t){let s=this.getEmptyMoveBoard(),r={x:0,y:0};for(let i=-1;i<=1;i++)for(let a=-1;a<=1;a++)r.x=e.x+i,r.y=e.y+a,this.inBounds(r)&&(s[r.x][r.y]=this.canMoveToOrCaptureOn(e,r,t));return s[e.x][e.y]=!1,s}getEmptyMoveBoard(){return Array.from(Array(8),(()=>Array(8).fill(!1)))}canMoveToOrCaptureOn(e,t,s){let r=s[t.x][t.y];return"EMPTY"==r||e.color!=r.color}printMoves(){let e="";for(let[t,s]of this.currentPlayersLegalMoves){console.log(t),e="W"==t.color?t.ruleSet:t.ruleSet.toLowerCase();for(let t=0;t<8;t++)for(let r=0;r<8;r++)s[t][r]&&console.log(`${e} can move to (${t},${r})`)}}cloneBoard(e){let t=[],s="EMPTY",r="EMPTY";for(let i=0;i<8;i++){t.push([]);for(let a=0;a<8;a++)r=e[i][a],s="EMPTY"!=r?Object.assign({},r):"EMPTY",t[i].push(s)}return t}}},769:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChessBoard=void 0;class s{constructor(e,t){this.hasKingsideCastleRights=!0,this.hasQueensideCastleRights=!0,this.king=e,this.subjects=t}removePiece(e){this.subjects=this.subjects.filter((t=>!(t===e)))}addPiece(e){-1==this.subjects.indexOf(e)&&this.subjects.push(e)}color(){return this.king.color}}t.ChessBoard=class{constructor(){this.players=[],this.board=Array.from(Array(8),(()=>Array(8).fill("EMPTY"))),this.players.push(this.initPlayer("W")),this.players.push(this.initPlayer("B"))}initPlayer(e){let t="W"===e?0:7,r=this.createPieceAt(4,t,"KING",e),i=this.makeSoldiers(e);return new s(r,i)}makeSoldiers(e){let[t,s]=[0,1];"B"==e&&([t,s]=[7,6]);let r=[this.createPieceAt(3,t,"QUEEN",e)];for(let t=0;t<8;t++)r.push(this.createPieceAt(t,s,"PAWN",e));return["ROOK","KNIGHT","BISHOP"].forEach(((s,i)=>{r.push(this.createPieceAt(i,t,s,e)),r.push(this.createPieceAt(7-i,t,s,e))}),this),r}getTestBoard(){let e=Array.from(Array(8),(()=>Array(8).fill("EMPTY"))),t="EMPTY";for(let s=0;s<8;s++)for(let r=0;r<8;r++)t=this.board[s][r],"EMPTY"!=t&&(e[s][r]=Object.assign({},t));return e}getPlayer(e){switch(e){case"W":return this.players[0];case"B":return this.players[1]}}getAllPiecesOf(e){let t=this.getPlayer(e);return[...t.subjects,t.king]}getAllPiecesButKingOf(e){return[...this.getPlayer(e).subjects]}getKingOf(e){return Object.assign({},this.getPlayer(e).king)}getSquareAt(e){return this.board[e.x][e.y]}getAllGamePieces(){let e=this.getAllPiecesOf("W"),t=this.getAllPiecesOf("B");return e.concat(t)}commitMove(e,t){this.board[e.x][e.y]="EMPTY";let s=this.board[t.x][t.y];"EMPTY"!=s&&this.clearPiece(s),this.setPieceAt(e,t)}createPieceAt(e,t,s,r){let i={ruleSet:s,color:r,x:e,y:t};return this.board[e][t]=i,i}setPieceAt(e,t){this.board[t.x][t.y]=e,e=Object.assign(e,t)}clearPiece(e){this.getPlayer(e.color).removePiece(e),this.board[e.x][e.y]="EMPTY"}squareIsEmpty(e){return"EMPTY"===this.board[e.x][e.y]}squareHasEnemy(e,t){let s=this.board[t.x][t.y];return"EMPTY"!==s&&e!=s.color}playerCanCastle(e){let t=this.getPlayer(e);return t.hasKingsideCastleRights||t.hasQueensideCastleRights}revokeAllCastleRights(e){let t=this.getPlayer(e);t.hasKingsideCastleRights=!1,t.hasQueensideCastleRights=!1}revokeKingsideCastleRights(e){this.getPlayer(e).hasKingsideCastleRights=!1}revokeQueensideCastleRights(e){this.getPlayer(e).hasQueensideCastleRights=!1}}},884:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLetterFromPiece=t.solidBoardDrawer=t.spriteSheetPieceDrawer=t.textPieceDrawer=t.boardDrawer=t.pieceDrawer=void 0;class s{getSprite(e){switch(e.color){case"W":return this.getWhiteSprite(e);case"B":return this.getBlackSprite(e)}}}t.pieceDrawer=s;class r{constructor(){this.evenCheckerSprite="",this.oddCheckerSprite="",this.selectedCheckerSprite=""}BGSpriteAtXYGivenThreats(e,t,s){return s[e][t]?this.selectedCheckerSprite:e%2==t%2?this.evenCheckerSprite:this.oddCheckerSprite}}function i(e){let t=e.ruleSet.slice(0,1);return"KNIGHT"==e.ruleSet&&(t="N"),"B"==e.color&&(t=t.toLowerCase()),t}t.boardDrawer=r,t.textPieceDrawer=class extends s{constructor(){super()}draw(e,t,s){let r={spriteChar:"",spriteColor:""},[i,a]=[0,0],o=Math.floor(s/8);t.font=`${Math.floor(o/2)}px Arial`;let h=1/3;for(let s of e)r=this.getSprite(s),i=o*(s.x+h),a=o*(8-(s.y+h)),"white"==r.spriteColor&&(t.strokeStyle="black",t.lineWidth=8,t.strokeText(r.spriteChar,i,a)),t.fillStyle=r.spriteColor,t.fillText(r.spriteChar,i,a)}getWhiteSprite(e){return{spriteChar:i(e),spriteColor:"white"}}getBlackSprite(e){return{spriteChar:i(e),spriteColor:"black"}}},t.spriteSheetPieceDrawer=class extends s{draw(e,t,s){}getBlackSprite(e){return[0,0,0,0]}getWhiteSprite(e){return[0,0,0,0]}pieceDrawingCoordinateTransform(e,t){return[0,0]}},t.solidBoardDrawer=class extends r{constructor(){super(),this.evenCheckerSprite="beige",this.oddCheckerSprite="brown",this.selectedCheckerSprite="grey"}draw(e,t,s){let[r,i,a]=["",0,0],o=s/8;for(var h=0;h<8;h++)for(var l=0;l<8;l++)r=this.BGSpriteAtXYGivenThreats(h,l,e),t.fillStyle=r,i=h*o,a=(7-l)*o,t.fillRect(i,a,o,o)}},t.getLetterFromPiece=i}},t={};new(function s(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,s),a.exports}(120).ChessController)})();
//# sourceMappingURL=bundle.js.map