(()=>{"use strict";var e={769:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GAME=void 0,t.GAME=class{constructor(){this.turn="W",this.board=Array.from(Array(8),(()=>Array(8).fill("EMPTY"))),this.initStartPosition(),this.turn="W"}initStartPosition(){this.initPawns(),this.initMinorPieces(),this.initRoyalty()}initPawns(){for(let e=0;e<8;e++)this.setPieceAt(e,1,"PAWN","W"),this.setPieceAt(e,6,"PAWN","B")}initMinorPieces(){["ROOK","KNIGHT","BISHOP"].forEach(((e,t)=>{this.setPieceAt(t,0,e,"W"),this.setPieceAt(t,7,e,"B"),this.setPieceAt(7-t,0,e,"W"),this.setPieceAt(7-t,7,e,"B")}),this)}initRoyalty(){this.setPieceAt(3,0,"QUEEN","W"),this.setPieceAt(3,7,"QUEEN","B"),this.setPieceAt(4,0,"KING","W"),this.setPieceAt(4,7,"KING","B")}setPieceAt(e,t,r,s){let i={ruleSet:r,color:s};this.board[e][t]=i}clearSquareAt(e,t){this.board[e][t]="EMPTY"}getBoard(){return this.board}legalMovesByWhatIs(e){let t=this.board[e.x][e.y];return"EMPTY"===t?this.getCleanThreatBoard():this.getLegalMovesOf(t,e)}getLegalMovesOf(e,t){return this.getCleanThreatBoard()}candidateMoveIsLegal(e,t,r){}getMovespaceOf(e,t){switch(e.ruleSet){case"QUEEN":return this.queenMovespace(t);case"KING":return this.kingMovespace(e.color,t);case"KNIGHT":return this.knightMovespace(t);case"BISHOP":return this.bishopMovespace(t);case"ROOK":return this.rookMovespace(t);case"PAWN":return this.pawnMovespace(t)}}queenMovespace(e){return this.getCleanThreatBoard()}bishopMovespace(e){return this.getCleanThreatBoard()}rookMovespace(e){return this.getCleanThreatBoard()}pawnMovespace(e){return this.getCleanThreatBoard()}knightMovespace(e){return this.getCleanThreatBoard()}kingMovespace(e,t){return this.getCleanThreatBoard()}isThereAThreatAt(e,t){return!1}getCleanThreatBoard(){return Array.from(Array(8),(()=>Array(8).fill(!1)))}}},419:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RENDERER=void 0,t.RENDERER=class{getPieceDrawerOptions(){return["Text","Sprites"]}getBoardDrawerOptions(){return["Solid"]}setBoardDrawer(e){if("Solid"===e)return this.currentBoardDrawer=new o(this),this.curBDrawerType="Solid",!0}setPieceDrawer(e){switch(e){case"Text":return this.currentPieceDrawer=new s(this),this.curPDrawerType="Text",!0;case"Sprites":return this.currentPieceDrawer=new i(this),this.curPDrawerType="Sprites",!0}}constructor(e,t){this.renderEnabled=!1,this.CTX=t,this.sqDim=20,this.curBDrawerType="Solid",this.currentBoardDrawer=new o(this),this.curPDrawerType="Text",this.currentPieceDrawer=new s(this)}draw(e,t){!1===this.renderEnabled?this.drawToConsole(e,t):(this.currentBoardDrawer.draw(t),this.drawSprites(e))}drawSprites(e){let t,[r,s]=[0,0];for(let i=0;i<8;i++)for(let a=0;a<8;a++)[r,s]=this.boardToCanvasCoordTransform(i,a),t=e[i][a],"EMPTY"!=t&&this.currentPieceDrawer.drawSpriteAt(r,s,t)}drawToConsole(e,t){let r,[s,i]=["",""];for(var a=7;a>=0;a--){for(var o=0;o<8;o++)r=e[o][a],"EMPTY"===r?i="X":(i=this.getLetterFromPiece(r),"B"===r.color&&(i=i.toLowerCase())),s+=i;console.log(s),s=""}}boardToCanvasCoordTransform(e,t){return[this.sqDim*e,this.sqDim*(8-t)]}getSqDim(){return this.sqDim}getCTX(){return this.CTX}getLetterFromPiece(e){switch(e.ruleSet){case"KING":return"K";case"QUEEN":return"Q";case"ROOK":return"R";case"BISHOP":return"B";case"KNIGHT":return"N";case"PAWN":return"P"}}};class r{constructor(e){this.parent=e}getSprite(e){switch(e.color){case"W":return this.getWhiteSprite(e);case"B":return this.getBlackSprite(e)}}}class s extends r{constructor(e){super(e)}drawSpriteAt(e,t,r){let s=this.parent.getCTX(),i=(this.parent.getSqDim(),this.getSprite(r));s.fillStyle=i.spriteColor,s.fillText(i.spriteChar,e,t)}getWhiteSprite(e){return{spriteChar:this.parent.getLetterFromPiece(e),spriteColor:"white"}}getBlackSprite(e){return{spriteChar:this.parent.getLetterFromPiece(e).toLowerCase(),spriteColor:"black"}}}class i extends r{drawSpriteAt(e,t,r){}getBlackSprite(e){return[0,0,0,0]}getWhiteSprite(e){return[0,0,0,0]}}class a{constructor(e){this.evenCheckerSprite="",this.oddCheckerSprite="",this.selectedCheckerSprite="",this.parent=e}BGSpriteAtXYGivenThreats(e,t,r){return r[e][t]?this.selectedCheckerSprite:e+t%2==0?this.evenCheckerSprite:this.oddCheckerSprite}}class o extends a{constructor(e){super(e),this.evenCheckerSprite="beige",this.oddCheckerSprite="brown",this.selectedCheckerSprite="grey"}draw(e){let t=this.parent.getCTX(),r=this.parent.getSqDim(),[s,i,a]=["",0,0];for(var o=0;o<8;o++)for(var n=0;n<8;n++)s=this.BGSpriteAtXYGivenThreats(o,n,e),t.fillStyle=s,[i,a]=this.parent.boardToCanvasCoordTransform(o,n),t.fillRect(i,a,r,r)}}}},t={};function r(s){var i=t[s];if(void 0!==i)return i.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,r),a.exports}(()=>{const e=r(769),t=r(419);let s=document.createElement("canvas");document.body.appendChild(s);let i=s.getContext("2d");i&&function(r){let s=(new e.GAME).getBoard();new t.RENDERER(100,r).draw(s,[[!1]])}(i)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,